-- Bubble Gum Simulator Infinity - One-Click Grind Script
-- GUI déplaçable, fermable, avec config personnalisable
-- Compatible avec SWIFT Executor

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local Player = Players.LocalPlayer

-- Configuration par défaut
getgenv().bgsInfConfig = {
    AUTO_UPDATE_RESTART = true,
    PURCHASE_ALIENSHOP = true,
    PURCHASE_BLACKMARKET = true,
    RESTOCK_SHOP = "shard-shop", -- Blackmarket
    USE_ROYAL_KEY = true,
    USE_GOLDEN_KEY = true,
    USE_MYSTERY_BOX = true,
    RARITY_TO_DELETE = {"Common", "Unique", "Rare"},
    LEGENDARY_TIER_TO_DELETE = 2,
    ENCHANT_TEAMUP = true,
    ENCHANT_TEAMUP_TIER = 1,
    RIFT_EGGS = {"Nightmare Egg", "Rainbow Egg"},
    HATCH_1X_EGG = "Hell Egg",
    DO_BUBBLE_GUM = true,
    IGNORE_MYSTERY_BOX_GEM_CAP = false,
    HATCH_INFERNO_CUBE_AMOUNT = 6,
    MASTERY_BUFFS_LEVEL = 15,
    IGNORE_STARTER_HATCH = false,
    POTIONS_TO_CRAFT = {"Coins", "Lucky", "Speed", "Mythic"},
    FARM_MIN_GEMS = 1000000,
    MIN_COINS_BEFORE_HATCHING = 3000000000
}

-- Variables globales
local RemoteEvent = ReplicatedStorage.Shared.Framework.Network.Remote.Event
local RemoteFunction = ReplicatedStorage.Shared.Framework.Network.Remote.Function
local PlayerDataChanged = ReplicatedStorage.Remotes.PlayerDataChanged
local Active = false
local PetInventory = {} -- Simulé pour l'exemple
local CurrentCoins = 0
local CurrentGems = 0
local CurrentIsland = "Main" -- Île actuelle

-- Création du GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "BSGInfinityGrind"
ScreenGui.Parent = Player:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 400, 0, 500)
MainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui
MainFrame.Active = true
MainFrame.Draggable = true

local Corner = Instance.new("UICorner")
Corner.CornerRadius = UDim.new(0, 10)
Corner.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.BackgroundTransparency = 1
Title.Text = "BSG Infinity One-Click Grind"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 20
Title.Font = Enum.Font.SourceSansBold
Title.Parent = MainFrame

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 60, 60)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = MainFrame

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0.9, 0, 0.1, 0)
ToggleButton.Position = UDim2.new(0.05, 0, 0.85, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 160, 60)
ToggleButton.Text = "ACTIVER"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 16
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.Parent = MainFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 5)
ToggleCorner.Parent = ToggleButton

-- Liste des îles
local Islands = {
    "Floating Island",
    "Outer Space",
    "Twilight",
    "The Void",
    "Zen"
}

-- Liste des œufs
local Eggs = {
    {Name = "Common Egg", Cost = 10},
    {Name = "Spotted Egg", Cost = 110},
    {Name = "Iceshard Egg", Cost = 450},
    {Name = "Spikey Egg", Cost = 5000},
    {Name = "Magma Egg", Cost = 15000},
    {Name = "Crystal Egg", Cost = 75000},
    {Name = "Lunar Egg", Cost = 100000},
    {Name = "Void Egg", Cost = 175000},
    {Name = "Hell Egg", Cost = 300000},
    {Name = "Nightmare Egg", Cost = 900000},
    {Name = "Rainbow Egg", Cost = 1500000}
}

-- Liste des potions
local Potions = {
    "Lucky", "Speed", "Coins", "Mythic"
}

-- Fonction pour obtenir les données du joueur
local function UpdatePlayerData()
    local success, result = pcall(function()
        return PlayerDataChanged:InvokeServer()
    end)
    if success then
        CurrentCoins = result.Coins or 0
        CurrentGems = result.Gems or 0
        -- Simuler l'inventaire (à remplacer par la vraie logique)
        PetInventory = result.Pets or {}
    end
end

-- Fonction pour déverrouiller les îles
local function UnlockIslands()
    for _, island in ipairs(Islands) do
        local hitbox = Workspace.Worlds["The Overworld"].Islands[island].Island.UnlockHitbox
        if hitbox then
            local character = Player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = hitbox.CFrame
                wait(1)
            end
        end
    end
end

-- Fonction pour souffler et vendre du chewing-gum
local function AutoBlowSell()
    if not bgsInfConfig.DO_BUBBLE_GUM or CurrentCoins >= bgsInfConfig.MIN_COINS_BEFORE_HATCHING then
        return
    end
    RemoteEvent:FireServer("BlowBubble")
    wait(0.5)
    RemoteEvent:FireServer("SellBubble")
end

-- Fonction pour acheter des saveurs et stockage
local function AutoBuyFlavorsStorage()
    if CurrentCoins >= 1000 then
        RemoteEvent:FireServer("GumShopPurchase", "Lemon")
        wait(0.2)
        RemoteEvent:FireServer("GumShopPurchase", "Unreal Gum")
    end
end

-- Fonction pour équiper les meilleurs pets
local function AutoEquipPets()
    RemoteEvent:FireServer("EquipBestPets")
end

-- Fonction pour enchanter les pets
local function AutoEnchantPets()
    if bgsInfConfig.ENCHANT_TEAMUP then
        for _, pet in pairs(PetInventory) do
            if pet.Tier >= bgsInfConfig.ENCHANT_TEAMUP_TIER then
                RemoteFunction:InvokeServer("RerollEnchants", pet.ID)
                wait(0.2)
            end
        end
    end
end

-- Fonction pour supprimer les pets de faible rareté
local function AutoDeletePets()
    for _, pet in pairs(PetInventory) do
        if table.find(bgsInfConfig.RARITY_TO_DELETE, pet.Rarity) or (pet.Rarity == "Legendary" and pet.Tier <= bgsInfConfig.LEGENDARY_TIER_TO_DELETE) then
            RemoteEvent:FireServer("DeletePet", pet.ID, 1, false)
            wait(0.2)
        end
    end
end

-- Fonction pour hacher les œufs
local function AutoHatchEggs()
    local eggToHatch = bgsInfConfig.HATCH_1X_EGG
    if CurrentCoins < bgsInfConfig.MIN_COINS_BEFORE_HATCHING then
        for _, egg in ipairs(Eggs) do
            if CurrentCoins >= egg.Cost then
                eggToHatch = egg.Name
                break
            end
        end
    end
    if table.find(bgsInfConfig.RIFT_EGGS, eggToHatch) then
        RemoteEvent:FireServer("HatchEgg", eggToHatch, 3)
    else
        RemoteEvent:FireServer("HatchEgg", eggToHatch, 1)
    end
    wait(1)
end

-- Fonction pour acheter dans les boutiques
local function AutoBuyShops()
    if bgsInfConfig.PURCHASE_ALIENSHOP then
        for i = 1, 3 do
            RemoteEvent:FireServer("BuyShopItem", "alien-shop", i)
            wait(0.2)
        end
    end
    if bgsInfConfig.PURCHASE_BLACKMARKET then
        for i = 1, 3 do
            RemoteEvent:FireServer("BuyShopItem", "shard-shop", i)
            wait(0.2)
        end
    end
end

-- Fonction pour fabriquer et consommer des potions
local function AutoPotions()
    for _, potion in ipairs(bgsInfConfig.POTIONS_TO_CRAFT) do
        for tier = 1, 5 do
            RemoteEvent:FireServer("CraftPotion", potion, tier, false)
            wait(0.2)
            RemoteEvent:FireServer("UsePotion", potion, tier)
            wait(0.2)
        end
    end
end

-- Fonction pour consommer les power-ups
local function AutoConsumePowerups()
    RemoteEvent:FireServer("UsePowerOrb", "72136f64-3e1d-4b8b-9b31-374440caaee8")
    wait(0.5)
end

-- Fonction pour ouvrir les Mystery Boxes
local function AutoMysteryBox()
    if bgsInfConfig.USE_MYSTERY_BOX then
        RemoteEvent:FireServer("UseGift", "Mystery Box", 10)
        wait(0.5)
    end
end

-- Fonction pour utiliser les tickets
local function AutoTickets()
    RemoteEvent:FireServer("ClaimFreeWheelSpin")
    wait(0.5)
end

-- Fonction pour hacher les œufs saisonniers
local function AutoHatchSeasonEggs()
    RemoteEvent:FireServer("HatchPowerupEgg", "Season 1 Egg", 3)
    wait(1)
end

-- Fonction pour ouvrir les Golden Orbs
local function AutoGoldenOrbs()
    RemoteEvent:FireServer("UseGoldenOrb")
    wait(0.5)
end

-- Fonction pour réclamer les prix
local function AutoClaimPrizes()
    for i = 1, 20 do
        RemoteEvent:FireServer("ClaimPrize", i)
        wait(0.2)
    end
end

-- Fonction pour tourner la roue
local function AutoSpinWheel()
    RemoteFunction:InvokeServer("WheelSpin")
    wait(0.5)
end

-- Fonction pour ouvrir les coffres
local function AutoOpenChests()
    RemoteEvent:FireServer("ClaimChest", "Giant Chest")
    wait(0.5)
end

-- Fonction pour réclamer les cadeaux
local function AutoClaimGifts()
    RemoteFunction:InvokeServer("ClaimPlaytime", 1)
    wait(0.5)
end

-- Fonction pour améliorer les buffs de maîtrise
local function AutoUpgradeMastery()
    if CurrentGems >= 10000 then
        RemoteEvent:FireServer("UpgradeMastery", "Shops")
        wait(0.5)
    end
end

-- Boucle principale
local function MainLoop()
    while Active do
        UpdatePlayerData()
        if bgsInfConfig.AUTO_UPDATE_RESTART then
            -- Placeholder pour la logique de redémarrage
        end
        UnlockIslands()
        AutoBlowSell()
        AutoBuyFlavorsStorage()
        AutoEquipPets()
        AutoEnchantPets()
        AutoDeletePets()
        AutoHatchEggs()
        AutoBuyShops()
        AutoPotions()
        AutoConsumePowerups()
        AutoMysteryBox()
        AutoTickets()
        AutoHatchSeasonEggs()
        AutoGoldenOrbs()
        AutoClaimPrizes()
        AutoSpinWheel()
        AutoOpenChests()
        AutoClaimGifts()
        AutoUpgradeMastery()
        wait(1)
    end
end

-- Gestion du bouton Toggle
ToggleButton.MouseButton1Click:Connect(function()
    Active = not Active
    ToggleButton.Text = Active and "DÉSACTIVER" or "ACTIVER"
    ToggleButton.BackgroundColor3 = Active and Color3.fromRGB(160, 60, 60) or Color3.fromRGB(60, 160, 60)
    if Active then
        spawn(MainLoop)
    end
end)

-- Gestion du bouton de fermeture
CloseButton.MouseButton1Click:Connect(function()
    Active = false
    ScreenGui:Destroy()
end)

-- Animation des boutons
local function CreateButtonHover(button)
    local originalColor = button.BackgroundColor3
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = originalColor + Color3.fromRGB(50, 50, 50)}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = originalColor}):Play()
    end)
end

CreateButtonHover(ToggleButton)
CreateButtonHover(CloseButton)

-- Instructions :
-- - Activez le script via le bouton ACTIVER.
-- - Modifiez bgsInfConfig pour personnaliser les actions.
-- - Certaines actions (ex. : Redeem Codes, Daily Stars) ne sont pas implémentées faute de Remote Events.
-- - Vérifiez les Remote Events manquants (ex. : RestockShop, ConsumeElixir) pour des mises à jour futures.
